# Configuración global de ChirpStack
[logging]
level="info"

# PostgreSQL settings.
[postgresql]
  # PostgreSQL DSN.
  #
  # Format example: postgres://<USERNAME>:<PASSWORD>@<HOSTNAME>/<DATABASE>?sslmode=<SSLMODE>.
  #
  # SSL mode options:
  #  * disable - Do not use TLS
  #  * prefer - Attempt to connect with TLS but allow sessions without
  #  * require - Require the use of TLS
  dsn="postgres://chirpstack:chirpstack@$POSTGRES_HOST/chirpstack?sslmode=disable"

  # Max open connections.
  #
  # This sets the max. number of open connections that are allowed in the
  # PostgreSQL connection pool.
  max_open_connections=10

  # Min idle connections.
  #
  # This sets the min. number of idle connections in the PostgreSQL connection
  # pool (0 = equal to max_open_connections).
  min_idle_connections=0


# Redis settings
[redis]
servers=[
  "redis://redis:6379",
]

# API interface
[api]
bind="0.0.0.0:8080"

# Integración con el broker MQTT
#[integration.mqtt]
#server="tcp://mosquitto:1883"
#event_topic_template="au915/application/{{ .ApplicationID }}/device/{{ .DeviceInfo.DevEUI }}/event/{{ .EventType }}"
#state_topic_template="au915/application/{{ .ApplicationID }}/device/{{ .DeviceInfo.DevEUI }}/state/{{ .StateType }}"
#command_topic_template="au915/application/{{ .ApplicationID }}/device/{{ .DeviceInfo.DevEUI }}/command/{{ .CommandType }}"

# Regiones LoRaWAN habilitadas
[network]
enabled_regions=[
  "au915_0", # Región AU915 - Primer bloque de canales
]

# Gateway backend settings.
[gateway]
# Tiempo en segundos que el gateway puede estar inactivo antes de marcarlo como offline.
client_cert_lifetime="24h0m0s"

# Configuración del servicio de unión (join-server)
[join_server]
bind="0.0.0.0:8003"

[integration]

  # Enabled integrations (global).
  enabled = [
    "mqtt",
  ]

  # MQTT integration configuration.
  [integration.mqtt]

    # Event topic template.
    event_topic="application/{{application_id}}/device/{{dev_eui}}/event/{{event}}"

    # Command topic.
    #
    # This is the topic on which the MQTT subscribes for receiving (enqueue) commands.
    command_topic="application/{{application_id}}/device/{{dev_eui}}/command/{{command}}"

    # Use JSON encoding instead of Protobuf (binary).
    json=true

    # MQTT server (e.g. scheme://host:port where scheme is tcp, ssl or ws)
    server="tcp://mosquitto:1883/"

    # Connect with the given username (optional)
    username=""

    # Connect with the given password (optional)
    password=""

    # Quality of service level
    #
    # 0: at most once
    # 1: at least once
    # 2: exactly once
    #
    # Note: an increase of this value will decrease the performance.
    # For more information: https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels
    qos=0

    # Clean session
    #
    # Set the "clean session" flag in the connect message when this client
    # connects to an MQTT broker. By setting this flag you are indicating
    # that no messages saved by the broker for this client should be delivered.
    clean_session=false

    # Client ID
    #
    # Set the client id to be used by this client when connecting to the MQTT
    # broker. A client id must be no longer than 23 characters. If left blank,
    # a random id will be generated by ChirpStack.
    client_id=""

    # Keep alive interval.
    #
    # This defines the maximum time that that should pass without communication
    # between the client and server.
    keep_alive_interval="30s"

    # CA certificate file (optional)
    #
    # Use this when setting up a secure connection (when server uses ssl://...)
    # but the certificate used by the server is not trusted by any CA certificate
    # on the server (e.g. when self generated).
    #ca_cert=""

    # TLS certificate file (optional)
    #tls_cert=""

    # TLS key file (PKCS#8) (optional)
    #tls_key=""


    # Configuration for MQTT clients.
    #[integration.mqtt.client]

      # CA certificate and key file (optional).
      #
      # If setting the CA certificate and key file options, ChirpStack 
      # will generate client certificates which can be used by the MQTT clients for
      # authentication and authorization. The Common Name of the certificate will
      # be set to the ID of the application.
      #
      # The ca_key is expected to be in PKCS#8 format (you can use openssl to
      # convert to PKCS#8).
      #ca_cert=""
      #ca_key=""

      # Certificate lifetime.
      #
      # This defines how long (after generating) the certificate remains valid.
      #client_cert_lifetime="11months 30days 3h 50m 24s"
