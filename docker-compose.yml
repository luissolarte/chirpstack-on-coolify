version: "3"

services:
  # ChirpStack Application Server
  chirpstack:
    image: chirpstack/chirpstack:4
    command: -c /etc/chirpstack
    restart: unless-stopped
    volumes:
      - ./configuration/chirpstack:/etc/chirpstack
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_started
      redis:
        condition: service_started
    environment:
      - MQTT_BROKER_HOST=mosquitto
      - REDIS_HOST=redis
      - POSTGRESQL_HOST=postgres
    ports:
      - "8081:8080"

  # ChirpStack Gateway Bridge - Para gateway con MQTT forwarder
  # chirpstack-gateway-bridge-mqtt:
  #   image: chirpstack/chirpstack-gateway-bridge:4
  #   restart: unless-stopped
  #   volumes:
  #     - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
  #   environment:
  #     # Configurado para AU915
  #     - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=au915/gateway/{{ .GatewayID }}/event/{{ .EventType }}
  #     - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=au915/gateway/{{ .GatewayID }}/state/{{ .StateType }}
  #     - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=au915/gateway/{{ .GatewayID }}/command/#
  #     - INTEGRATION__MQTT__SERVER=tcp://mosquitto:1883
  #   depends_on:
  #     - mosquitto

  # ChirpStack Gateway Bridge - Para gateway con UDP Packet Forwarder
  # chirpstack-gateway-bridge-udp:
  #   image: chirpstack/chirpstack-gateway-bridge:4
  #   restart: unless-stopped
  #   ports:
  #     - "1700:1700/udp"
  #   volumes:
  #     - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge
  #   environment:
  #     # Configurado para AU915
  #     - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=au915/gateway/{{ .GatewayID }}/event/{{ .EventType }}
  #     - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=au915/gateway/{{ .GatewayID }}/state/{{ .StateType }}
  #     - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=au915/gateway/{{ .GatewayID }}/command/#
  #     - INTEGRATION__MQTT__SERVER=tcp://mosquitto:1883
  #   depends_on:
  #     - mosquitto

  # Servidor REST API de ChirpStack
  chirpstack-rest-api:
    image: chirpstack/chirpstack-rest-api:4
    restart: unless-stopped
    environment:
      - SERVER=chirpstack:8080
    ports:
      - "8090:8090"
    depends_on:
      - chirpstack

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
      - ./configuration/postgresql/initdb:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=chirpstack
      - POSTGRES_USER=chirpstack
      - POSTGRES_DB=chirpstack
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chirpstack && psql -U chirpstack -lqt | cut -d \\| -f 1 | grep -qw chirpstack"]
      interval: 5s
      timeout: 50s
      retries: 5
      start_period: 30s
    entrypoint: ["sh", "-c"]
    command: |
      "
      echo 'Iniciando PostgreSQL con configuración chirpstack...'
      # Iniciar PostgreSQL con el entrypoint original
      /usr/local/bin/docker-entrypoint.sh postgres &
      PG_PID=$$
      # Esperar a que PostgreSQL esté listo
      until pg_isready -U postgres > /dev/null 2>&1; do
        echo 'Esperando a PostgreSQL...'
        sleep 2
      done
      echo 'PostgreSQL iniciado, configurando chirpstack...'
      # Usar PGPASSWORD para evitar problemas con -W
      export PGPASSWORD=root
      # Crear rol chirpstack
      psql -U postgres -h localhost -c \"CREATE ROLE chirpstack WITH LOGIN PASSWORD 'chirpstack';\" 2>/dev/null || echo 'Rol chirpstack ya existe'
      # Crear base de datos chirpstack
      psql -U postgres -h localhost -c \"CREATE DATABASE chirpstack WITH OWNER chirpstack;\" 2>/dev/null || echo 'DB chirpstack ya existe'
      # Conectar a la base de datos chirpstack y crear extensiones
      psql -U postgres -h localhost -d chirpstack -c \"CREATE EXTENSION IF NOT EXISTS pg_trgm;\"
      psql -U postgres -h localhost -d chirpstack -c \"CREATE EXTENSION IF NOT EXISTS hstore;\"
      echo 'Configuración completa'
      # Mantener PostgreSQL ejecutándose
      wait $$PG_PID
      "
      
  # Redis database
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    # ports:
    #   - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MQTT broker - Usando entrypoint para generar configuración
  mosquitto:
    image: eclipse-mosquitto:2
    restart: unless-stopped
    ports:
      - "1883:1883"
    volumes:
      - mosquitto-config:/mosquitto/config
    environment:
      - ALLOW_ANONYMOUS=true
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
    entrypoint: >
      sh -c "
      echo 'listener 1883' > /mosquitto/config/mosquitto.conf &&
      echo 'allow_anonymous true' >> /mosquitto/config/mosquitto.conf &&
      echo 'connection_messages true' >> /mosquitto/config/mosquitto.conf &&
      echo 'log_dest stdout' >> /mosquitto/config/mosquitto.conf &&
      chmod 0644 /mosquitto/config/mosquitto.conf &&
      exec mosquitto -c /mosquitto/config/mosquitto.conf
      "

volumes:
  postgres_data:
  redis_data:
  mosquitto-config: